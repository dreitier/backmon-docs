"use strict";(self.webpackChunkcloudmon_docs=self.webpackChunkcloudmon_docs||[]).push([[724],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return k}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var m=a.createContext({}),d=function(e){var t=a.useContext(m),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(m.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,m=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(n),k=r,s=c["".concat(m,".").concat(k)]||c[k]||u[k]||i;return n?a.createElement(s,o(o({ref:t},p),{},{components:n})):a.createElement(s,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var m in t)hasOwnProperty.call(t,m)&&(l[m]=t[m]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7246:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return m},default:function(){return k},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={},m="Overview",d={unversionedId:"reference/cloudmon-configuration/overview",id:"reference/cloudmon-configuration/overview",title:"Overview",description:"cloudmon's binary must run either on a bare-metal host or inside a Docker container.",source:"@site/docs/reference/10-cloudmon-configuration/overview.md",sourceDirName:"reference/10-cloudmon-configuration",slug:"/reference/cloudmon-configuration/overview",permalink:"/cloudmon-docs/reference/cloudmon-configuration/overview",draft:!1,editUrl:"https://github.com/dreitier/cloudmon-docs/tree/main/docs/docs/reference/10-cloudmon-configuration/overview.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuration",permalink:"/cloudmon-docs/category/configuration"},next:{title:"Storage",permalink:"/cloudmon-docs/reference/cloudmon-configuration/storage"}},p={},u=[{value:"Command line options for <em>cloudmon</em>",id:"command-line-options-for-cloudmon",level:2},{value:"Configuration file <code>config.yaml</code>",id:"configuration-file-configyaml",level:2},{value:"Sample configuration file",id:"sample-configuration-file",level:3}],c={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"overview"},"Overview"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"cloudmon"),"'s binary must run either on a bare-metal host or inside a Docker container.\nIt then can be configure through a configuration file.\nIn it, you specify which disks, local filesystem paths or S3 buckets, have to be monitored."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"cloudmon")," inspects each of the configured disks. If a ",(0,i.kt)("a",{parentName:"p",href:"/cloudmon-docs/reference/backup-definition/overview"},"backup definition")," is found in a disk, its ",(0,i.kt)("a",{parentName:"p",href:"/cloudmon-docs/reference/backup-definition/overview"},"backup definition")," is applied."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"cloudmon")," tries to locate the configuration file ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml")," in the following directories, priority in the defined order:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"local directory: ",(0,i.kt)("inlineCode",{parentName:"li"},"./config.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"${HOME}/.cloudmon/config.yaml")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/etc/cloudmon/config.yaml"))),(0,i.kt)("p",null,"In the configuration file, you can use environment placeholders like ",(0,i.kt)("inlineCode",{parentName:"p"},"${VAR}"),". Those placeholders will be replaced during the startup of ",(0,i.kt)("em",{parentName:"p"},"cloudmon")," with the corresponding environment variables. You have to place the configuration file at ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/cloudmon/config-raw.yaml"),"."),(0,i.kt)("h2",{id:"command-line-options-for-cloudmon"},"Command line options for ",(0,i.kt)("em",{parentName:"h2"},"cloudmon")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Option"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"--debug")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")," (",(0,i.kt)("em",{parentName:"td"},"bool"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Enable debug output; overwrites any log setting from ",(0,i.kt)("inlineCode",{parentName:"td"},"config.yaml"))))),(0,i.kt)("h2",{id:"configuration-file-configyaml"},"Configuration file ",(0,i.kt)("inlineCode",{parentName:"h2"},"config.yaml")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"port")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"80")," (",(0,i.kt)("em",{parentName:"td"},"int"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Default HTTP port to listen for requests. TLS is not supported at the moment. Consider using a proxy if you need encryption.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"update_interval")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"1h")," (",(0,i.kt)("em",{parentName:"td"},"duration"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Checks each disk in that duration interval.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"ignore_disks")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"list of strings"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Each of the listed disks is ignored and won't be considered.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"list of environment"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Each ",(0,i.kt)("inlineCode",{parentName:"td"},"environment")," to check.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[]")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Yes")),(0,i.kt)("td",{parentName:"tr",align:null},"Name of environment.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].definitions")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"backup_definitions.yaml")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"YAML file containing the backup definitions.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].path")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Local path to check for. If you use the ",(0,i.kt)("inlineCode",{parentName:"td"},"path")," parameter, other parameters specific for S3 are ignored.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].region")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"eu-central-1")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"AWS region")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].force_path_style")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"false")," (",(0,i.kt)("em",{parentName:"td"},"bool"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Use path-style for that S3 bucket. This is deprecated by AWS S3 and should be probably ",(0,i.kt)("inlineCode",{parentName:"td"},"false"),".")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].access_key_id")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Yes")),(0,i.kt)("td",{parentName:"tr",align:null},"AWS Access Key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].secret_access_key")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("strong",{parentName:"td"},"Yes")),(0,i.kt)("td",{parentName:"tr",align:null},"AWS Secret Access Key")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].endpoint")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"Custom AWS S3 endpoint. This must be used for Minio buckets or if you are using a local S3 instance.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"environments[].token")),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<empty>")," (",(0,i.kt)("em",{parentName:"td"},"string"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"No"),(0,i.kt)("td",{parentName:"tr",align:null},"AWS STS session token. You can leave that empty.")))),(0,i.kt)("h3",{id:"sample-configuration-file"},"Sample configuration file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"\nport: 8080\nupdate_interval: 1m\nignore_disks:\n  - disk_1\n  - disk_2\n \nenvironments:\n  env_1:\n    path: /my/backups\n  env_2:\n    access_key_id: my_access_key_id\n    secret_access_key: my_secret_access_key\n    \n")))}k.isMDXComponent=!0}}]);