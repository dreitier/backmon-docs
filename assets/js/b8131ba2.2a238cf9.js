"use strict";(self.webpackChunkcloudmon_docs=self.webpackChunkcloudmon_docs||[]).push([[864],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=u(t),m=o,k=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return t?r.createElement(k,a(a({ref:n},s),{},{components:t})):r.createElement(k,a({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var u=2;u<i;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},6788:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return p}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={},l="Storage",u={unversionedId:"reference/cloudmon-configuration/storage",id:"reference/cloudmon-configuration/storage",title:"Storage",description:"cloudmon supports backup file which are either stored",source:"@site/docs/reference/10-cloudmon-configuration/storage.md",sourceDirName:"reference/10-cloudmon-configuration",slug:"/reference/cloudmon-configuration/storage",permalink:"/cloudmon-docs/reference/cloudmon-configuration/storage",draft:!1,editUrl:"https://github.com/dreitier/cloudmon-docs/tree/main/docs/docs/reference/10-cloudmon-configuration/storage.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/cloudmon-docs/reference/cloudmon-configuration/overview"},next:{title:"Backup definition",permalink:"/cloudmon-docs/category/backup-definition"}},s={},p=[{value:"Storage providers",id:"storage-providers",level:2},{value:"Local filesystem",id:"local-filesystem",level:3},{value:"S3",id:"s3",level:3},{value:"IAM policy setup",id:"iam-policy-setup",level:4},{value:"Ignoring disks",id:"ignoring-disks",level:2}],d={toc:p};function m(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"storage"},"Storage"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"cloudmon")," supports backup file which are either stored"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in a local or local-mounted filesystem, like NFS"),(0,i.kt)("li",{parentName:"ul"},"or in an S3 compatible bucket like AWS S3 or Minio")),(0,i.kt)("h2",{id:"storage-providers"},"Storage providers"),(0,i.kt)("h3",{id:"local-filesystem"},"Local filesystem"),(0,i.kt)("p",null,"Local disks can be configured in the ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml")," by using the parameter ",(0,i.kt)("inlineCode",{parentName:"p"},"environments[].path"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environments:\n  local_backup:\n    path: /data/backup/mysql\n")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"cloudmon")," tries to read the ",(0,i.kt)("inlineCode",{parentName:"p"},"backup_definition.yaml")," from the location ",(0,i.kt)("inlineCode",{parentName:"p"},"/data/backup/mysql/backup_definition.yaml"),"."),(0,i.kt)("h3",{id:"s3"},"S3"),(0,i.kt)("p",null,"If you are configuring an S3 environment, ",(0,i.kt)("em",{parentName:"p"},"cloudmon")," automatically creates a disk for each S3 bucket. Let's suppose you have the following ",(0,i.kt)("inlineCode",{parentName:"p"},"config.yaml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"environments:\n  s3_backup:\n    access_key: my_access_key\n    secret_access_key: my_secret_access_key\n")),(0,i.kt)("p",null,"Your AWS account contains the following S3 buckets:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket-1")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket-2")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"bucket-3"))),(0,i.kt)("p",null,"Each of those buckets is considered as disk. You have to put a ",(0,i.kt)("inlineCode",{parentName:"p"},"backup_definition.yaml")," at ",(0,i.kt)("inlineCode",{parentName:"p"},"s3://bucket-1/backup_definition.yaml"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"s3://bucket-2/backup_definition.yaml")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"s3://bucket-3/backup_definition.yaml"),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If you want to ignore a bucket, either use the ",(0,i.kt)("inlineCode",{parentName:"li"},"disks.exclude")," configuration key or the ",(0,i.kt)("inlineCode",{parentName:"li"},".cloudmonignore")," marker file described below."),(0,i.kt)("li",{parentName:"ul"},"If your access key does not have the ",(0,i.kt)("inlineCode",{parentName:"li"},"ListBucket")," permission for one the buckets, the buckets get ignored.")),(0,i.kt)("h4",{id:"iam-policy-setup"},"IAM policy setup"),(0,i.kt)("p",null,"Your IAM user needs a policy attached with the following permissions:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},'{\n    "Version": "2012-10-17",\n    "Statement": [\n        {\n            "Sid": "ListAllBuckets",\n            "Effect": "Allow",\n            "Action": "s3:ListAllMyBuckets",\n            "Resource": "arn:aws:s3:::*"\n        },\n        {\n            "Sid": "ListBucketObjects",\n            "Effect": "Allow",\n            "Action": [\n                "s3:ListBucket"\n            ],\n            "Resource": [\n                "arn:aws:s3:::your-bucket"\n            ]\n        },\n        {\n            "Sid": "ListAndModifyActions",\n            "Effect": "Allow",\n            "Action": [\n                "s3:PutObject",\n                "s3:GetObject",\n                "s3:DeleteObject"\n            ],\n            "Resource": [\n                "arn:aws:s3:::your-bucket/*"\n            ]\n        }\n    ]\n}\n')),(0,i.kt)("h2",{id:"ignoring-disks"},"Ignoring disks"),(0,i.kt)("p",null,"In each disk, you can put a marker file named ",(0,i.kt)("inlineCode",{parentName:"p"},".cloudmonignore"),". When ",(0,i.kt)("em",{parentName:"p"},"cloudmon")," checks the disk and that file is present, the disk is ignored.\nThis may come in handy if you have multiple non-backup related buckets in your S3 account."))}m.isMDXComponent=!0}}]);